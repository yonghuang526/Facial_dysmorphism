Gait_Model= read.csv('/wdata/devGenes/Kevin - Gait Analyses/9.19.16 Data to Kevin for Gait Model.csv')
matchdata = data[match(row.names(feature),row.names(data)),]
subdata = data[match(feature[,1],data[,1]),]
na_data = subdata[-NA,]
subdata_new = subdata[-match(na_data[,1],subdata[,1]),]
number_of_affected <- c(0);
number_of_unaffected <- c(0);
for(i in 1:nrow(subdata_new)){
for(j in 5:ncol(subdata_new)){
if(!is.na(subdata_new[i,j])){
if(subdata_new[i,j] == 'TRUE'|subdata_new[i,j] == 'True'){
subdata_new[i,4] <-TRUE;
}
}
}
}
for(k in 1:nrow(subdata_new)){
if(is.na(subdata_new[k,4])){
subdata_new[k,4] <-FALSE;
number_of_unaffected <-number_of_unaffected+1;
}
else{
number_of_affected <- number_of_affected+1;
}
}
View(subdata_new)
for(m in 1:nrow(subdata_new)){
if(is.na(subdata_new[m,5])){
subdata_new[m,6]<-""
}
if(is.na(subdata_new[m,6])){
subdata_new[m,6]<-""
}
if(is.na(subdata_new[m,7])){
subdata_new[m,7]<-""
}
if(is.na(subdata_new[m,8])){
subdata_new[m,8]<-""
}
if(is.na(subdata_new[m,9])){
subdata_new[m,9]<-""
}
if(is.na(subdata_new[m,10])){
subdata_new[m,10]<-""
}
if(is.na(subdata_new[m,11])){
subdata_new[m,11]<-""
}
if(is.na(subdata_new[m,12])){
subdata_new[m,12]<-""
}
}
for(m in 1:nrow(subdata_new)){
if(is.na(subdata_new[m,5])){
subdata_new[m,5]<-""
}
if(is.na(subdata_new[m,6])){
subdata_new[m,6]<-""
}
if(is.na(subdata_new[m,7])){
subdata_new[m,7]<-""
}
if(is.na(subdata_new[m,8])){
subdata_new[m,8]<-""
}
if(is.na(subdata_new[m,9])){
subdata_new[m,9]<-""
}
if(is.na(subdata_new[m,10])){
subdata_new[m,10]<-""
}
if(is.na(subdata_new[m,11])){
subdata_new[m,11]<-""
}
if(is.na(subdata_new[m,12])){
subdata_new[m,12]<-""
}
}
subfeature <-data.frame(paste(subdata_new[,5],subdata_new[,9],sep = "",collapse = NULL))
subfeature <-data.frame(paste(subdata_new[,6],subdata_new[,10],sep = "",collapse = NULL))
subfeature <-data.frame(paste(subdata_new[,7],subdata_new[,11],sep = "",collapse = NULL))
subfeature <-data.frame(paste(subdata_new[,8],subdata_new[,12],sep = "",collapse = NULL))
View(subfeature)
subfeature <-matrix(0,ncol = 4,nrow = 772)
subfeature <-matrix(0,ncol = 4,nrow = 772)
for(m in 1:nrow(subdata_new)){
if(is.na(subdata_new[m,5])){
subdata_new[m,5]<-""
}
if(is.na(subdata_new[m,6])){
subdata_new[m,6]<-""
}
if(is.na(subdata_new[m,7])){
subdata_new[m,7]<-""
}
if(is.na(subdata_new[m,8])){
subdata_new[m,8]<-""
}
if(is.na(subdata_new[m,9])){
subdata_new[m,9]<-""
}
if(is.na(subdata_new[m,10])){
subdata_new[m,10]<-""
}
if(is.na(subdata_new[m,11])){
subdata_new[m,11]<-""
}
if(is.na(subdata_new[m,12])){
subdata_new[m,12]<-""
}
}
subfeature[,1] <-data.frame(paste(subdata_new[,5],subdata_new[,9],sep = "",collapse = NULL))
subfeature[,2]<-data.frame(paste(subdata_new[,6],subdata_new[,10],sep = "",collapse = NULL))
subfeature[,3]<-data.frame(paste(subdata_new[,7],subdata_new[,11],sep = "",collapse = NULL))
subfeature[,4]<-data.frame(paste(subdata_new[,8],subdata_new[,12],sep = "",collapse = NULL))
data = read.csv('/wdata/devGenes/Kevin - Gait Analyses/DevGenesDatabases_2017-08-29_1147.csv')
feature = read.csv('/wdata/devGenes/CURRENT DATA /kevin_facial_point_extraction/features.csv')
Gait_Model= read.csv('/wdata/devGenes/Kevin - Gait Analyses/9.19.16 Data to Kevin for Gait Model.csv')
matchdata = data[match(row.names(feature),row.names(data)),]
subdata = data[match(feature[,1],data[,1]),]
na_data = subdata[-NA,]
subdata_new = subdata[-match(na_data[,1],subdata[,1]),]
number_of_affected <- c(0);
number_of_unaffected <- c(0);
for(i in 1:nrow(subdata_new)){
for(j in 5:ncol(subdata_new)){
if(!is.na(subdata_new[i,j])){
if(subdata_new[i,j] == 'TRUE'|subdata_new[i,j] == 'True'){
subdata_new[i,4] <-TRUE;
}
}
}
}
for(k in 1:nrow(subdata_new)){
if(is.na(subdata_new[k,4])){
subdata_new[k,4] <-FALSE;
number_of_unaffected <-number_of_unaffected+1;
}
else{
number_of_affected <- number_of_affected+1;
}
}
#################################################
subfeature <-matrix(0,ncol = 4,nrow = 772)
for(m in 1:nrow(subdata_new)){
if(is.na(subdata_new[m,5])){
subdata_new[m,5]<-""
}
if(is.na(subdata_new[m,6])){
subdata_new[m,6]<-""
}
if(is.na(subdata_new[m,7])){
subdata_new[m,7]<-""
}
if(is.na(subdata_new[m,8])){
subdata_new[m,8]<-""
}
if(is.na(subdata_new[m,9])){
subdata_new[m,9]<-""
}
if(is.na(subdata_new[m,10])){
subdata_new[m,10]<-""
}
if(is.na(subdata_new[m,11])){
subdata_new[m,11]<-""
}
if(is.na(subdata_new[m,12])){
subdata_new[m,12]<-""
}
}
subfeature[,1] <-data.frame(paste(subdata_new[,5],subdata_new[,9],sep = "",collapse = NULL))
data = read.csv('/wdata/devGenes/Kevin - Gait Analyses/DevGenesDatabases_2017-08-29_1147.csv')
feature = read.csv('/wdata/devGenes/CURRENT DATA /kevin_facial_point_extraction/features.csv')
Gait_Model= read.csv('/wdata/devGenes/Kevin - Gait Analyses/9.19.16 Data to Kevin for Gait Model.csv')
matchdata = data[match(row.names(feature),row.names(data)),]
subdata = data[match(feature[,1],data[,1]),]
na_data = subdata[-NA,]
subdata_new = subdata[-match(na_data[,1],subdata[,1]),]
number_of_affected <- c(0);
number_of_unaffected <- c(0);
for(i in 1:nrow(subdata_new)){
for(j in 5:ncol(subdata_new)){
if(!is.na(subdata_new[i,j])){
if(subdata_new[i,j] == 'TRUE'|subdata_new[i,j] == 'True'){
subdata_new[i,4] <-TRUE;
}
}
}
}
for(k in 1:nrow(subdata_new)){
if(is.na(subdata_new[k,4])){
subdata_new[k,4] <-FALSE;
number_of_unaffected <-number_of_unaffected+1;
}
else{
number_of_affected <- number_of_affected+1;
}
}
#################################################
subfeature <-matrix(0,ncol = 4,nrow = 772)
for(m in 1:nrow(subdata_new)){
if(is.na(subdata_new[m,5])){
subdata_new[m,5]<-""
}
if(is.na(subdata_new[m,6])){
subdata_new[m,6]<-""
}
if(is.na(subdata_new[m,7])){
subdata_new[m,7]<-""
}
if(is.na(subdata_new[m,8])){
subdata_new[m,8]<-""
}
if(is.na(subdata_new[m,9])){
subdata_new[m,9]<-""
}
if(is.na(subdata_new[m,10])){
subdata_new[m,10]<-""
}
if(is.na(subdata_new[m,11])){
subdata_new[m,11]<-""
}
if(is.na(subdata_new[m,12])){
subdata_new[m,12]<-""
}
}
source('/wdata/rotating_students/yonghuang/data/2017_09_01_SubFeature.R', echo=TRUE)
data = read.csv('/wdata/devGenes/Kevin - Gait Analyses/DevGenesDatabases_2017-08-29_1147.csv')
feature = read.csv('/wdata/devGenes/CURRENT DATA /kevin_facial_point_extraction/features.csv')
Gait_Model= read.csv('/wdata/devGenes/Kevin - Gait Analyses/9.19.16 Data to Kevin for Gait Model.csv')
matchdata = data[match(row.names(feature),row.names(data)),]
subdata = data[match(feature[,1],data[,1]),]
na_data = subdata[-NA,]
subdata_new = subdata[-match(na_data[,1],subdata[,1]),]
number_of_affected <- c(0);
number_of_unaffected <- c(0);
for(i in 1:nrow(subdata_new)){
for(j in 5:ncol(subdata_new)){
if(!is.na(subdata_new[i,j])){
if(subdata_new[i,j] == 'TRUE'|subdata_new[i,j] == 'True'){
subdata_new[i,4] <-TRUE;
}
}
}
}
for(k in 1:nrow(subdata_new)){
if(is.na(subdata_new[k,4])){
subdata_new[k,4] <-FALSE;
number_of_unaffected <-number_of_unaffected+1;
}
else{
number_of_affected <- number_of_affected+1;
}
}
#################################################
#subfeature <-matrix(0,ncol = 4,nrow = 772)
for(m in 1:nrow(subdata_new)){
if(is.na(subdata_new[m,5])){
subdata_new[m,5]<-""
}
if(is.na(subdata_new[m,6])){
subdata_new[m,6]<-""
}
if(is.na(subdata_new[m,7])){
subdata_new[m,7]<-""
}
if(is.na(subdata_new[m,8])){
subdata_new[m,8]<-""
}
if(is.na(subdata_new[m,9])){
subdata_new[m,9]<-""
}
if(is.na(subdata_new[m,10])){
subdata_new[m,10]<-""
}
if(is.na(subdata_new[m,11])){
subdata_new[m,11]<-""
}
if(is.na(subdata_new[m,12])){
subdata_new[m,12]<-""
}
}
subfeature<-cbind(data.frame(paste(subdata_new[,5],subdata_new[,9],sep = "",collapse = NULL)),data.frame(paste(subdata_new[,6],subdata_new[,10],sep = "",collapse = NULL)))
subfeature<-cbind(subfeature,data.frame(paste(subdata_new[,7],subdata_new[,11],sep = "",collapse = NULL)))
subfeature<-cbind(subfeature,data.frame(paste(subdata_new[,8],subdata_new[,12],sep = "",collapse = NULL)))
subfeature <- cbind(subdata_new[,1],subfeature)
rownames(subfeature) <-subfeature[,1]
subfeature[,1] <-NULL
names(subfeature) <- c("Autism(reported)","Epilepsy status","Language-impair","ID" )
write.csv(subfeature,file = "/wdata/rotating_students/yonghuang/data/subfeatures(merged).csv")
library(randomForest)
library(pROC)
set.seed(42)
new_features <- read.csv('/wdata/rotating_students/yonghuang/data/sub_features.csv')
update_feature.scale <- read.csv('/wdata/rotating_students/yonghuang/data/scaled_features.csv')
epilepsy <- read.csv('/wdata/rotating_students/yonghuang/data/subfeature(merged).csv')
epilepsy <- read.csv('/wdata/rotating_students/yonghuang/data/subfeatures(merged).csv')
subfeatures<- read.csv('/wdata/rotating_students/yonghuang/data/subfeatures(merged).csv')
library(randomForest)
library(pROC)
set.seed(42)
new_features <- read.csv('/wdata/rotating_students/yonghuang/data/sub_features.csv')
update_feature.scale <- read.csv('/wdata/rotating_students/yonghuang/data/scaled_features.csv')
subfeatures<- read.csv('/wdata/rotating_students/yonghuang/data/subfeatures(merged).csv')
rownames(update_feature.scale) <- update_feature.scale[,1]
update_feature.scale <- update_feature.scale[,-1]
View(subfeatures)
rownames(subfeatures) <-subfeatures[,1]
subfeatures[,1] <-NULL
for(i in 1:nrow(epilepsy)){
if(is.na(subfeatures[i,1])){
subfeatures[i,1]<-FALSE
}
if(is.na(subfeatures[i,2])){
subfeatures[i,1]<-FALSE
}
if(is.na(subfeatures[i,3])){
subfeatures[i,1]<-FALSE
}
if(is.na(subfeatures[i,4])){
subfeatures[i,1]<-FALSE
}
}
for(i in 1:nrow(subfeatures)){
if(is.na(subfeatures[i,1])){
subfeatures[i,1]<-FALSE
}
if(is.na(subfeatures[i,2])){
subfeatures[i,1]<-FALSE
}
if(is.na(subfeatures[i,3])){
subfeatures[i,1]<-FALSE
}
if(is.na(subfeatures[i,4])){
subfeatures[i,1]<-FALSE
}
}
sum(is.na(subfeatures[,2]))
sum(subfeatures[,2]=="FALSE")
sum(subfeatures[,2]=="TRUE")
sum(subfeatures[,2]=="TRUE ")
subfeatures$Epilepsy.status
sum(subfeatures[,1]=="TRUE")
View(subfeatures)
new_features <- read.csv('/wdata/rotating_students/yonghuang/data/sub_features.csv')
update_feature.scale <- read.csv('/wdata/rotating_students/yonghuang/data/scaled_features.csv')
subfeatures<- read.csv('/wdata/rotating_students/yonghuang/data/subfeatures(merged).csv')
rownames(update_feature.scale) <- update_feature.scale[,1]
update_feature.scale <- update_feature.scale[,-1]
rownames(subfeatures) <-subfeatures[,1]
subfeatures[,1] <-NULL
for(i in 1:nrow(subfeatures)){
if(is.na(subfeatures[i,1])){
subfeatures[i,1]<-FALSE
}
if(is.na(subfeatures[i,2])){
subfeatures[i,2]<-FALSE
}
if(is.na(subfeatures[i,3])){
subfeatures[i,3]<-FALSE
}
if(is.na(subfeatures[i,4])){
subfeatures[i,4]<-FALSE
}
}
View(subfeatures)
boxplot(rf$votes[,2]~subfeatures$Epilepsy.status)
boxplot(rf$votes[,2]~subfeatures$Epilepsy.status)
boxplot(rf$votes[,2]~data.frame(subfeatures$Epilepsy.status))
boxplot(rf$votes[,2]~subfeatures[,2])
boxplot(rf$votes[,2]~subfeatures[,1])
View(subfeatures)
boxplot(rf$votes[,2]~subfeatures[,2])
typeof(subfeatures)
library(randomForest)
library(pROC)
set.seed(42)
new_features <- read.csv('/wdata/rotating_students/yonghuang/data/sub_features.csv')
update_feature.scale <- read.csv('/wdata/rotating_students/yonghuang/data/scaled_features.csv')
subfeatures<- read.csv('/wdata/rotating_students/yonghuang/data/subfeatures(merged).csv')
rownames(update_feature.scale) <- update_feature.scale[,1]
update_feature.scale <- update_feature.scale[,-1]
rownames(subfeatures) <-subfeatures[,1]
subfeatures[,1] <-NULL
for(i in 1:nrow(subfeatures)){
if(is.na(subfeatures[i,1])){
subfeatures[i,1]<-FALSE
}
if(is.na(subfeatures[i,2])){
subfeatures[i,2]<-FALSE
}
if(is.na(subfeatures[i,3])){
subfeatures[i,3]<-FALSE
}
if(is.na(subfeatures[i,4])){
subfeatures[i,4]<-FALSE
}
}
prediction_label <-matrix(0,nrow = nrow(update_feature.scale),ncol = 1)
test_label <- as.character(new_features$Affected.status)
### get Euclidean distances between facial landmarks
update_feature.scale_distance = t(apply(update_feature.scale,1,function(x) as.numeric(dist(matrix(x,12,2,byrow=T)))))
### randomforest sampling
rf = randomForest(y=factor(new_features$Affected.status),x=update_feature.scale_distance,strata=as.factor(new_features$Affected.status),sampsize=c(283,283),ntree=5000)
### labeling the facial features
facial_feature <- matrix(0,nrow = 12,ncol = 1)
l=1
facial_feature[l,1] <- as.character(gsub("_x","",colnames(update_feature.scale)[1]))
for(l in 1:11) {
facial_feature[l+1,1] <- as.character(gsub("_x","",colnames(update_feature.scale)[2*l+1]))
}
Euclidean_distance <- matrix(0,nrow =  66,ncol = 1)
i = 1
k=1
for (i in 1:(nrow(facial_feature)-1)){
for(j in (i+1):12){
Euclidean_distance[k,1] <-  paste(facial_feature[i,1],"to",facial_feature[j,1])
k <-k+1
}
}
Euclidean_distance_importance <- cbind(Euclidean_distance,rf$importance)
colnames(Euclidean_distance_importance) <- c("Euclidean_distance",colnames(Euclidean_distance_importance)[2])
#rf = randomForest(y=factor(new_features$Affected.status),x=update_feature.scale_distance,ntree=5000)
face = lm(rf$votes[,2]~new_features$Affected.status)
prediction_set <- rf$votes[,2]
prediction_label <-as.character(prediction_set > 0.4744243)
#prediction_label <-as.character(prediction_set > 0.5422379)
#prediction_label <-as.character(prediction_set >0.4499703) --(non_strata)
accuracy <- sum(prediction_label == test_label) / length(test_label)
male <- new_features[grep("Male",new_features[,2]),]
female <- new_features[grep("Female",new_features[,2]),]
affected_m <- male[grep("TRUE",male[,4]),]
unaffected_m <-male[grep("FALSE",male[,4]),]
affected_fm <- female[grep("TRUE",female[,4]),]
unaffected_fm <- female[grep("FALSE",female[,4]),]
new_features[row.names(affected_m),5] <- "affected_m"
new_features[row.names(unaffected_m),5] <- "unaffected_m"
new_features[row.names(affected_fm),5] <- "affected_fm"
new_features[row.names(unaffected_fm),5] <- "unaffected_fm"
sex_status <- factor(new_features[,5], levels = c("unaffected_fm","affected_fm","unaffected_m","affected_m"))
plot.roc(new_features$Affected.status,rf$votes[,2],percent=TRUE,partial.auc=c(100, 90),print.auc=TRUE,print.auc.pattern="Corrected pAUC (100-90%% SP):\n%.1f%%", print.auc.col="#1c61b6",auc.polygon=TRUE, auc.polygon.col="#1c61b6",max.auc.polygon=TRUE, max.auc.polygon.col="#1c61b622", main="Partial AUC (pAUC)")
plot.roc(new_features$Affected.status,rf$votes[,2],percent=TRUE,partial.auc=c(100, 90),print.auc=TRUE,print.auc.pattern="Corrected pAUC (100-90%% SP):\n%.1f%%", print.auc.col="#1c61b6",auc.polygon=TRUE, auc.polygon.col="#1c61b6",max.auc.polygon=TRUE, max.auc.polygon.col="#1c61b622", main="Partial AUC (pAUC)")
plot.roc(new_features$Affected.status,rf$votes[,2],percent=TRUE, add=TRUE, type="n",partial.auc=c(100, 90),partial.auc.focus="se",print.auc=TRUE, print.auc.pattern="Corrected pAUC (100-90%% SE):\n%.1f%%", print.auc.col="#008600",print.auc.y=40,auc.polygon=TRUE, auc.polygon.col="#008600",max.auc.polygon=TRUE, max.auc.polygon.col="#00860022")
rocobj1 <- plot.roc(new_features$Affected.status,rf$votes[,2], main="Statistical comparison", percent=TRUE, col="#1c61b6")
coords(rocobj1,x="best",ret=c("threshold", "specificity", "sensitivity"),as.list=FALSE, drop=TRUE, best.method=c("closest.topleft"),best.weights=c(1, 0.3))
table(new_features$Affected.status,prediction_label)
order(rf$importance)
rf$importance[order(rf$importance)]
boxplot(rf$votes[,2]~subfeatures[,2])
boxplot(rf$votes[,2]~subfeatures)
boxplot(rf$votes[,2]~subfeatures[,1])
boxplot(rf$votes[,2]~subfeatures[,3])
boxplot(rf$votes[,2]~subfeatures[,4])
sum(subfeatures[1,] == TRUE)
sum(subfeatures[2,] == TRUE)
count <- matrix(0,ncol= 1,nrow= 772)
for(k in 1:nrow(subfeatures)){
count[k,1]<-sum(subfeatures[k,] == TRUE)
}
View(count)
hist(count[,1],rf$votes)
boxplot(rf$votes,count[,1])
boxplot(rf$votes~count[,1])
boxplot(rf$votes[,2]~subfeatures[,2])
plot(count[,1],rf$votes)
plot(count[,1],rf$votes[,2])
boxplot(rf$votes[,2],count[,1])
boxplot(rf$votes[,2]~count[,1])
count <-cbind(rownames(subfeatures),count[,1])
View(count)
rownames(count)<-count[,1]
count[,1]<-NULL
count[,-1]
count[,-1]
count[,1]
count[,1]<-NULL
count[,1] <- NULL
rownames(count)<-count[,1]
count <- count[-1]
count
count <- matrix(0,ncol= 1,nrow= 772)
for(k in 1:nrow(subfeatures)){
count[k,1]<-sum(subfeatures[k,] == TRUE)
}
count <-cbind(rownames(subfeatures),count[,1])
rownames(count)<-count[,1]
View(count)
count <- count[,-1]
count
count <- data.frame(count[,-1])
count <-cbind(rownames(subfeatures),count[,1])
rownames(count)<-count[,1]
count <- data.frame(count[,-1])
count <- matrix(0,ncol= 1,nrow= 772)
for(k in 1:nrow(subfeatures)){
count[k,1]<-sum(subfeatures[k,] == TRUE)
}
count <-cbind(rownames(subfeatures),count[,1])
rownames(count)<-count[,1]
View(count)
count <- data.frame(count[,-1])
boxplot(rf$votes[,2]~count[,1])
sum(count[,1]==2)
sum(count[,1]==1)
sum(count[,1]==3)
sum(count[,1]==4)
hist(count[,1])
hist(count)
hist(as.numeric(count[,1]))
sum(count[,1]==5)
boxplot(rf$votes[,2]~count[,1])
sum(count[,1]==0)
